{"version":3,"file":"static/js/65.d4c27002.chunk.js","mappings":"qOAGaA,G,QAAiBC,EAAAA,OAAW,CACvCC,KAAMD,EAAAA,SAAaE,SAAS,oBAC5BC,MAAOH,EAAAA,SACJE,SAAS,qBACTC,MAAM,8BACTC,SAAUJ,EAAAA,SACPE,SAAS,wBACTG,IAAI,EAAG,sCACPC,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBA,QAAQ,QAAS,8BACpBC,QAASP,EAAAA,SACNE,SAAS,gCACTM,MAAM,CAACR,EAAAA,IAAQ,YAAa,MAAO,wCAG3BS,EAAiBT,EAAAA,SAAaU,MAAM,CAC/CT,KAAMD,EAAAA,SACHE,WACAG,IAAI,GACJM,IAAI,IACJL,QACC,yHACA,6BAEJM,OAAQZ,EAAAA,SAAaa,MAAM,MAAMX,SAAS,gCAG/BY,EAAcd,EAAAA,OAAW,CACpCG,MAAOH,EAAAA,SACJE,SAAS,qBACTC,MAAM,8BACTC,SAAUJ,EAAAA,SACPE,SAAS,wBACTG,IAAI,EAAG,sCACPC,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBA,QAAQ,QAAS,+B,uICvCTS,EAAYC,EAAAA,EAAAA,EAAH,gFAMTC,GAAWD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,uJAORG,EAAQH,EAAAA,EAAAA,GAAH,mEAKLI,EAAYJ,EAAAA,EAAAA,MAAH,6FAKTK,EAAOL,EAAAA,EAAAA,KAAH,8GAOJM,GAAQN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,iOAcLQ,EAAeR,EAAAA,EAAAA,OAAH,gW,mBCjCnBS,EAAgB,CACpBxB,KAAM,GACNE,MAAO,GACPC,SAAU,GACVG,QAAS,IAGLmB,EAAY,SAAC,GAAc,IAAZzB,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACN0B,OAAQ,SAAAC,GAAO,OAAI,SAACb,EAAD,UAAYa,GAAhB,GAGpB,EAEYC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,SAAC,KAAD,CACEN,cAAeA,EACfO,iBAAkBjC,EAAAA,GAClBkC,SAhBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BL,GACEM,EAAAA,EAAAA,IAAS,CACPnC,KAAMiC,EAAOjC,KACbE,MAAO+B,EAAO/B,MACdC,SAAU8B,EAAO9B,SACjBG,QAAS2B,EAAO3B,WAGpB4B,GACD,EAGC,UAKE,UAAClB,EAAD,CAAUoB,aAAa,MAAvB,WACE,SAAClB,EAAD,4BACA,UAACC,EAAD,YACE,SAACC,EAAD,oBACA,SAACC,EAAD,CAAOgB,KAAK,OAAOrC,KAAK,OAAOsC,YAAY,iBAC3C,SAACb,EAAD,CAAWzB,KAAK,aAElB,UAACmB,EAAD,YACE,SAACC,EAAD,qBACA,SAACC,EAAD,CAAOgB,KAAK,QAAQrC,KAAK,QAAQsC,YAAY,0BAC7C,SAACb,EAAD,CAAWzB,KAAK,cAElB,UAACmB,EAAD,YACE,SAACC,EAAD,wBACA,SAACC,EAAD,CACEgB,KAAK,WACLrC,KAAK,WACLsC,YAAY,sBAEd,SAACb,EAAD,CAAWzB,KAAK,iBAElB,UAACmB,EAAD,YACE,SAACC,EAAD,gCACA,SAACC,EAAD,CACEgB,KAAK,WACLrC,KAAK,UACLsC,YAAY,iCAEd,SAACb,EAAD,CAAWzB,KAAK,gBAElB,SAACuB,EAAD,CAAcc,KAAK,SAAnB,wBAIP,EC3ED,EARqB,WACnB,OACE,0BACE,SAACT,EAAD,KAGL,C","sources":["helpers/validation.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport 'yup-phone';\n\nexport const registerSchema = Yup.object({\n  name: Yup.string().required('Name is required'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Please enter a valid email'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n  confirm: Yup.string()\n    .required('Password confirm is required')\n    .oneOf([Yup.ref('password'), null], 'Must match \"password\" field value'),\n});\n\nexport const contactsSchema = Yup.object().shape({\n  name: Yup.string()\n    .required()\n    .min(5)\n    .max(24)\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      'Please enter correct name'\n    ),\n  number: Yup.string().phone('UA').required('A phone number is required'),\n});\n\nexport const loginSchema = Yup.object({\n  email: Yup.string()\n    .required('Email is required')\n    .email('Please enter a valid email'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n});\n","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nexport const FormCont = styled(Form)`\n  padding-top: 60px;\n  display: inline-block;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  color: #960909;\n`;\n\nexport const LabelCont = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\nexport const Text = styled.span`\n  font-size: 18px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  text-align: start;\n`;\n\nexport const Input = styled(Field)`\n  display: inline-block;\n  margin: auto;\n  margin-bottom: 5px;\n  width: 300px;\n  padding: 15px;\n  border: none;\n  border-radius: 20px;\n\n  :hover,\n  :focus {\n    outline-color: #c29e9e;\n  }\n`;\nexport const SubmitButton = styled.button`\n  font-size: 20px;\n  font-weight: 700;\n  background-color: white;\n  margin-bottom: 40px;\n  border: none;\n  border-radius: 20px;\n  padding: 10px;\n  cursor: pointer;\n\n  :hover {\n    background-color: #bda6a6;\n    color: white;\n    border: 2px solid #c29e9e;\n  }\n\n  transition: background-color 0.25s, color 0.25s;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage} from 'formik';\nimport { register } from 'redux/auth/operations';\nimport {\n  ErrorText,\n  FormCont,\n  Text,\n  SubmitButton,\n  LabelCont,\n  Input,\n  Title,\n} from './RegisterForm.styled';\nimport { registerSchema } from 'helpers/validation';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirm: '',\n};\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n        confirm: values.confirm,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={registerSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormCont autoComplete=\"off\">\n        <Title>Registration</Title>\n        <LabelCont>\n          <Text>Name</Text>\n          <Input type=\"text\" name=\"name\" placeholder=\"Jack Daniel\" />\n          <FormError name=\"name\" />\n        </LabelCont>\n        <LabelCont>\n          <Text>Email</Text>\n          <Input type=\"email\" name=\"email\" placeholder=\"jackdaniel@gmail.com\" />\n          <FormError name=\"email\" />\n        </LabelCont>\n        <LabelCont>\n          <Text>Password</Text>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Enter a password\"\n          />\n          <FormError name=\"password\" />\n        </LabelCont>\n        <LabelCont>\n          <Text>Password confirm</Text>\n          <Input\n            type=\"password\"\n            name=\"confirm\"\n            placeholder=\"Enter a password once again\"\n          />\n          <FormError name=\"confirm\" />\n        </LabelCont>\n        <SubmitButton type=\"submit\">Submit</SubmitButton>\n      </FormCont>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerSchema","Yup","name","required","email","password","min","matches","confirm","oneOf","contactsSchema","shape","max","number","phone","loginSchema","ErrorText","styled","FormCont","Form","Title","LabelCont","Text","Input","Field","SubmitButton","initialValues","FormError","render","message","RegisterForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","register","autoComplete","type","placeholder"],"sourceRoot":""}