{"version":3,"file":"static/js/65.6cad8a0d.chunk.js","mappings":"qOAGaA,G,QAAiBC,EAAAA,OAAW,CACvCC,KAAMD,EAAAA,SAAaE,SAAS,oBAC5BC,MAAOH,EAAAA,SACJE,SAAS,qBACTC,MAAM,8BACTC,SAAUJ,EAAAA,SACPE,SAAS,wBACTG,IAAI,EAAG,sCACPC,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBA,QAAQ,QAAS,8BACpBC,QAASP,EAAAA,SACNE,SAAS,gCACTM,MAAM,CAACR,EAAAA,IAAQ,YAAa,MAAO,wCAG3BS,EAAiBT,EAAAA,SAAaU,MAAM,CAC/CT,KAAMD,EAAAA,SACHE,WACAG,IAAI,GACJM,IAAI,IACJL,QACC,yHACA,6BAEJM,OAAQZ,EAAAA,SAAaa,MAAM,MAAMX,SAAS,gCAG/BY,EAAcd,EAAAA,OAAW,CACpCG,MAAOH,EAAAA,SACJE,SAAS,qBACTC,MAAM,8BACTC,SAAUJ,EAAAA,SACPE,SAAS,wBACTG,IAAI,EAAG,sCACPC,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBA,QAAQ,QAAS,+B,iHCvCTS,E,QAAYC,EAAAA,EAAH,2D,mBCGhBC,EAAgB,CACpBhB,KAAM,GACNE,MAAO,GACPC,SAAU,GACVG,QAAS,IAGLW,EAAY,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNkB,OAAQ,SAAAC,GAAO,OAAI,SAACL,EAAD,UAAYK,GAAhB,GAGpB,EAEYC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,SAAC,KAAD,CACEN,cAAeA,EACfO,iBAAkBzB,EAAAA,GAClB0B,SAhBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BL,GACEM,EAAAA,EAAAA,IAAS,CACP3B,KAAMyB,EAAOzB,KACbE,MAAOuB,EAAOvB,MACdC,SAAUsB,EAAOtB,SACjBG,QAASmB,EAAOnB,WAGpBoB,GACD,EAGC,UAKE,UAAC,KAAD,CAAME,aAAa,MAAnB,WACE,qCAEE,SAAC,KAAD,CAAOC,KAAK,OAAO7B,KAAK,OAAO8B,YAAY,iBAC3C,SAACb,EAAD,CAAWjB,KAAK,aAElB,sCAEE,SAAC,KAAD,CAAO6B,KAAK,QAAQ7B,KAAK,QAAQ8B,YAAY,0BAC7C,SAACb,EAAD,CAAWjB,KAAK,cAElB,yCAEE,SAAC,KAAD,CACE6B,KAAK,WACL7B,KAAK,WACL8B,YAAY,sBAEd,SAACb,EAAD,CAAWjB,KAAK,iBAElB,iDAEE,SAAC,KAAD,CACE6B,KAAK,WACL7B,KAAK,UACL8B,YAAY,iCAEd,SAACb,EAAD,CAAWjB,KAAK,gBAElB,mBAAQ6B,KAAK,SAAb,wBAIP,ECjED,EATqB,WACnB,OACE,4BACE,sCACA,SAACT,EAAD,MAGL,C","sources":["helpers/validation.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport 'yup-phone';\n\nexport const registerSchema = Yup.object({\n  name: Yup.string().required('Name is required'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Please enter a valid email'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n  confirm: Yup.string()\n    .required('Password confirm is required')\n    .oneOf([Yup.ref('password'), null], 'Must match \"password\" field value'),\n});\n\nexport const contactsSchema = Yup.object().shape({\n  name: Yup.string()\n    .required()\n    .min(5)\n    .max(24)\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      'Please enter correct name'\n    ),\n  number: Yup.string().phone('UA').required('A phone number is required'),\n});\n\nexport const loginSchema = Yup.object({\n  email: Yup.string()\n    .required('Email is required')\n    .email('Please enter a valid email'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n});\n","import styled from '@emotion/styled';\n// import { Field, Form } from 'formik';\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 14px;\n`;","import { useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage, Form, Field } from 'formik';\nimport { register } from 'redux/auth/operations';\nimport { ErrorText } from './RegisterForm.styled';\nimport { registerSchema } from 'helpers/validation';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirm: '',\n};\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n        confirm: values.confirm,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={registerSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <label>\n          Name\n          <Field type=\"text\" name=\"name\" placeholder=\"Jack Daniel\" />\n          <FormError name=\"name\" />\n        </label>\n        <label>\n          Email\n          <Field type=\"email\" name=\"email\" placeholder=\"jackdaniel@gmail.com\" />\n          <FormError name=\"email\" />\n        </label>\n        <label>\n          Password\n          <Field\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Enter a password\"\n          />\n          <FormError name=\"password\" />\n        </label>\n        <label>\n          Password confirm\n          <Field\n            type=\"password\"\n            name=\"confirm\"\n            placeholder=\"Enter a password once again\"\n          />\n          <FormError name=\"confirm\" />\n        </label>\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <div>\n      <h1>Register</h1>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerSchema","Yup","name","required","email","password","min","matches","confirm","oneOf","contactsSchema","shape","max","number","phone","loginSchema","ErrorText","styled","initialValues","FormError","render","message","RegisterForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","register","autoComplete","type","placeholder"],"sourceRoot":""}