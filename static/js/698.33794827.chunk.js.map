{"version":3,"file":"static/js/698.33794827.chunk.js","mappings":"sOAGaA,G,QAAiBC,EAAAA,OAAW,CACvCC,KAAMD,EAAAA,SAAaE,SAAS,oBAC5BC,MAAOH,EAAAA,SACJE,SAAS,qBACTC,MAAM,8BACTC,SAAUJ,EAAAA,SACPE,SAAS,wBACTG,IAAI,EAAG,sCACPC,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBA,QAAQ,QAAS,8BACpBC,QAASP,EAAAA,SACNE,SAAS,gCACTM,MAAM,CAACR,EAAAA,IAAQ,YAAa,MAAO,wCAG3BS,EAAiBT,EAAAA,SAAaU,MAAM,CAC/CT,KAAMD,EAAAA,SACHE,WACAG,IAAI,GACJM,IAAI,IACJL,QACC,yHACA,6BAEJM,OAAQZ,EAAAA,SAAaa,MAAM,MAAMX,SAAS,gCAG/BY,EAAcd,EAAAA,OAAW,CACpCG,MAAOH,EAAAA,SACJE,SAAS,qBACTC,MAAM,8BACTC,SAAUJ,EAAAA,SACPE,SAAS,wBACTG,IAAI,EAAG,sCACPC,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBA,QAAQ,QAAS,+B,0HCvCTS,E,QAAYC,EAAAA,EAAH,2D,SCIhBC,EAAgB,CACpBd,MAAO,GACPC,SAAU,IAGNc,EAAY,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNkB,OAAQ,SAAAC,GAAO,OAAI,SAACL,EAAD,UAAYK,GAAhB,GAGpB,EAEYC,EAAY,WAEvB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC,KAAD,CACEN,cAAeA,EACfO,iBAAkBV,EAAAA,GAClBW,SAViB,SAAAC,GACnBJ,GAASK,EAAAA,EAAAA,IAAM,CAAExB,MAAOuB,EAAOvB,MAAOC,SAAUsB,EAAOtB,WACxD,EAKC,UAKE,UAAC,KAAD,YACE,sCAEE,SAAC,KAAD,CAAOwB,KAAK,QAAQ3B,KAAK,QAAQ4B,MAAM,MACvC,SAACX,EAAD,CAAWjB,KAAK,cAElB,yCAEE,SAAC,KAAD,CAAO2B,KAAK,WAAW3B,KAAK,cAC5B,SAACiB,EAAD,CAAWjB,KAAK,iBAElB,mBAAQ2B,KAAK,SAAb,wBAIP,ECxCD,EATkB,WAChB,OACE,4BACE,mCACA,SAACP,EAAD,MAGL,C","sources":["helpers/validation.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport 'yup-phone';\n\nexport const registerSchema = Yup.object({\n  name: Yup.string().required('Name is required'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Please enter a valid email'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n  confirm: Yup.string()\n    .required('Password confirm is required')\n    .oneOf([Yup.ref('password'), null], 'Must match \"password\" field value'),\n});\n\nexport const contactsSchema = Yup.object().shape({\n  name: Yup.string()\n    .required()\n    .min(5)\n    .max(24)\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      'Please enter correct name'\n    ),\n  number: Yup.string().phone('UA').required('A phone number is required'),\n});\n\nexport const loginSchema = Yup.object({\n  email: Yup.string()\n    .required('Email is required')\n    .email('Please enter a valid email'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol'),\n});\n","import styled from '@emotion/styled';\n// import { Field, Form } from 'formik';\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 14px;\n`;\n","// import { Box, TextField, IconButton, Typography } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { logIn } from 'redux/auth/operations';\nimport { loginSchema } from 'helpers/validation';\nimport { ErrorText } from './LoginForm.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nexport const LoginForm = () => {\n  // const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n  const handleSubmit = values => {\n    dispatch(logIn({ email: values.email, password: values.password }));\n  };\n\n  // const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={loginSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label>\n          Email\n          <Field type=\"email\" name=\"email\" label=''/>\n          <FormError name=\"email\" />\n        </label>\n        <label>\n          Password\n          <Field type=\"password\" name=\"password\" />\n          <FormError name=\"password\" />\n        </label>\n        <button type=\"submit\">submit</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["registerSchema","Yup","name","required","email","password","min","matches","confirm","oneOf","contactsSchema","shape","max","number","phone","loginSchema","ErrorText","styled","initialValues","FormError","render","message","LoginForm","dispatch","useDispatch","validationSchema","onSubmit","values","logIn","type","label"],"sourceRoot":""}